﻿@using CommunityEventPlanner.UI.Services
@using CommunityEventPlanner.UI.Services.Implementation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    @context.User.Identity.Name &nbsp;
                    <button class="btn btn-danger" @onclick="Logout"> Logout</button>
                </Authorized>
                <NotAuthorized>
                    Guest &nbsp;
                    <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                    <NavLink class="nav-link" href="/register" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </NotAuthorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
@code
{
    private async Task Logout()
    {
        var authenticationStateProvider = (ComunityEventAuthenticationStateProvider)AuthenticationStateProvider;
        await authenticationStateProvider.UpdateAuthenticationState(null);
        NavManager.NavigateTo("/login");
    }
}

