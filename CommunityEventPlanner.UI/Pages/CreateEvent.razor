@page "/CreateEvent"
@using CommunityEventPlanner.Shared
@using CommunityEventPlanner.Shared.Contract
@using CommunityEventPlanner.UI.Services.Implementation
@using CommunityEventPlanner.UI.Services.Interface
@using Microsoft.AspNetCore.Components.Authorization
@inject ICommunityEventService CommunityEventService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Events</PageTitle>

<h1>Create Events</h1>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="CommunityEvent" OnValidSubmit="HandleEventCreation" Enhance>
                <div class="form-group mb-3">
                    <span>Name:</span>
                    <input @bind="CommunityEvent.Name"
                            class="form-control"
                            placeholder="Name"
                            required>
                    </input>
                </div>
                <div class="form-group mb-3">
                    <span>Summary:</span>
                    <textarea @bind="CommunityEvent.Summary"
                            class="form-control"
                            placeholder="Summary">
                    </textarea>
                </div>
                <div class="form-group mb-3">
                    <span>Start Date:</span>
                <br />
                    <InputDate TValue="DateTime" Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="CommunityEvent.StartDate" Placeholder="Start Date" />
                </div>
                <div class="form-group mb-3">
                    <span>End Date:</span>
                    <br />
                    <InputDate TValue="DateTime?" Type="InputDateType.DateTimeLocal"  class="form-control" @bind-Value="CommunityEvent.EndDate" Placeholder="End Date" />
                </div>
                @if(!string.IsNullOrEmpty(ResultMessage))
                {
                    <span class="alert alert-info">@ResultMessage</span>
                }
                <button class="btn btn-primary float-end" type="submit">
                    Create
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {

    public CommunityEventCreationRequest CommunityEvent { get; set; } = new() { Name = "", StartDate = DateTime.Now.Date};
    public string ResultMessage { get; set; } = string.Empty;
    private async Task HandleEventCreation()
    {
        if (CommunityEvent.EndDate.HasValue && CommunityEvent.StartDate > CommunityEvent.EndDate.Value)
        {
            ResultMessage = "Start Date must be before End Date";
            return;
        }

        var (success, message) = await CommunityEventService.CreateAsync(CommunityEvent);
        ResultMessage = message;
        if (success)
        {
            CommunityEvent = new() { Name = "", StartDate = DateTime.Now };
        }

        return;
    }
}