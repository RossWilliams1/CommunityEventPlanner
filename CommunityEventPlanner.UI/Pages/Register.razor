@page "/Register"
@using CommunityEventPlanner.Shared.Contract
@using CommunityEventPlanner.Shared.Service.Interface
@inject IUserManagerService UserManagerService
@inject IJSRuntime js
@inject NavigationManager NavManager

<PageTitle>Register</PageTitle>
<h1>Register</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="RegisterUserRequest" OnValidSubmit="HandleUserRegistration" Enhance>
                <div class="form-group mb-3">
                        <input @bind="RegisterUserRequest.Name"
                            class="form-control"
                            placeholder="Name">
                    </input>
                </div>
                <div class="form-group mb-3">
                        <input @bind="RegisterUserRequest.Email"
                            class="form-control"
                            type="email"
                            placeholder="Email">
                    </input>
                </div>
                <div class="form-group">
                    <div class="input-group mb-3">
                        <input type="password"
                                class="form-control"
                                @bind="RegisterUserRequest.Password"
                                placeholder="Password"
                                aria-label="Password"
                                aria-describedby="Password">
                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group mb-3">
                        <input type="password"
                                class="form-control"
                                @bind="RegisterUserRequest.ConfirmPassword"
                                placeholder="Confirm Password"
                                aria-label="ConfirmPassword"
                                aria-describedby="Confirm-Password">
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(ResultMessage))
                {
                    <span class="alert alert-danger">@ResultMessage</span>
                }
                <button class="btn btn-primary float-end"
                        type="submit">
                    Register
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {

    public RegisterUserRequest RegisterUserRequest { get; set; } = new();
    public string ResultMessage { get; set; } = string.Empty;
    private async Task HandleUserRegistration()
    {
        var (success, message) = await UserManagerService.RegisterUser(RegisterUserRequest);
        ResultMessage = message;
        if (success)
            NavManager.NavigateTo("/login", forceLoad: true);

        return;
    }
}